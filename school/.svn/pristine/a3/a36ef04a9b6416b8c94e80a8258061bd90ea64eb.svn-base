<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dkt.school.stu.dao.StudentPunishmentCustomMapper">
	<resultMap type="com.dkt.school.stu.model.StudentPunishment" id="StudentPunishment"
				extends="com.dkt.school.stu.dao.StudentPunishmentMapper.BaseResultMap"></resultMap>
	<resultMap type="com.dkt.school.stu.dto.StudentPunishmentDto" id="StudentPunishmentDto"
				extends="StudentPunishment">
		<result column="code" property="code" jdbcType="VARCHAR"/>
		<result column="class_id" property="classId" jdbcType="INTEGER"/>	
		<result column="name" property="name" jdbcType="VARCHAR"/>
		<result column="className" property="className" jdbcType="VARCHAR"/>
	</resultMap>
	
	<select id="getAllPunishmentStuList" resultMap="StudentPunishmentDto">
		SELECT DISTINCT
			s.id AS studentId,
			s.`name`,
			s.`code`,
			c.major_field_id,
			CONCAT(mf.`name`,c.`name`) AS className
		FROM
			stu_student AS s
		INNER JOIN stu_class AS c ON c.id = s.class_id
		INNER JOIN sch_major_field AS mf ON c.major_field_id = mf.id
		<where>
			<if test="name != null and name != '' ">
				 s.`name` like '%${name}%'
			</if>
			<if test="code != null and code != '' ">
				AND s.code like '%${code}%'
			</if>
		</where>
		<if test="limit != null and limit != '' ">
			LIMIT #{limit.offset},#{limit.rows}
		</if>	
	</select>
	
	<select id="getAllPunishmentStuCount" resultType="java.lang.Integer">
		SELECT COUNT(*) 
		FROM
			stu_student AS s
		INNER JOIN stu_class AS c ON c.id = s.class_id
		INNER JOIN sch_major_field AS mf ON c.major_field_id = mf.id
		<where>
			<if test="name != null and name != '' ">
				 s.`name` like '%${name}%'
			</if>
			<if test="code != null and code != '' ">
				AND s.code like '%${code}%'
			</if>
		</where>
	</select>
	
	<select id="getStudentPunishmentCount" resultType="java.lang.Integer">
		SELECT COUNT(*) 
		FROM stu_student_punishment p
		INNER JOIN stu_student s
		ON p.student_id = s.id
		<where>
			p.content IS NOT NULL
			<if test="code != null and code != '' ">
				AND s.code like '%${code}%'
			</if>
			<if test="punishmentType != null and punishmentType != '' ">
				AND p.punishment_type = ${punishmentType}
			</if>
			<if test="name != null and name != '' ">
				AND s.`name` like '%${name}%'
			</if>
		</where>
	</select>
	
	<select id="getStudentPunishmentDtoList" resultMap="StudentPunishmentDto">
		SELECT DISTINCT
			P.id,
			p.student_id,
			p.punishment_type AS punishmentType,
			p.content,
			p.remark,
			s.class_id AS classId,
			s.`code` AS `code`,
			s.`name` AS `name`,
			c.major_field_id,
			CONCAT(mf.`name`,c.`name`) AS className
		FROM
			stu_student_punishment AS p 
		INNER JOIN stu_student AS s ON p.student_id = s.id
		INNER JOIN stu_class AS c ON s.class_id = c.id
		INNER JOIN sch_major_field AS mf ON c.major_field_id = mf.id
		<where>
			p.content IS NOT NULL
			<if test="code != null and code != '' ">
				AND s.code like '%${code}%'
			</if>
			<if test="punishmentType != null and punishmentType != '' ">
				AND p.punishment_type = ${punishmentType}
			</if>
			<if test="name != null and name != '' ">
				AND s.`name` like '%${name}%'
			</if>
		</where>
		<if test="limit != null and limit != '' ">
			LIMIT #{limit.offset},#{limit.rows}
		</if>	
	</select>
	
	<select id="getStudentPunishmentDtoById" resultMap="StudentPunishmentDto">
		SELECT DISTINCT
			p.id,
			p.student_id,
			p.punishment_type AS punishmentType,
			p.content,
			p.remark,
			c.`name` AS className,
			s.class_id,
			s.`name`,
			s.`code`,
			c.`name` AS className
		FROM
			stu_student AS s
		INNER JOIN stu_student_punishment AS p ON s.id = p.student_id 
		INNER JOIN stu_class AS c ON c.id = s.class_id
		
		<where>
			p.student_id = #{studentId}
			AND p.id = #{id}
		</where>
	</select>
	
	<update id="updatePunishmentInfo" parameterType="com.dkt.school.stu.dto.StudentPunishmentDto">
		UPDATE stu_student_punishment AS p SET
		 p.punishment_type = #{sp.punishmentType}, 
		 p.content = #{sp.content}, p.remark = #{sp.remark}
		 <where>
		 	p.id = #{sp.id}
		 </where>
	</update>
	
	<delete id="deleteByStudentId" parameterType="java.lang.Integer">
		DELETE FROM 
			stu_student_punishment 
		<where>
			id = #{id}
		</where>
	</delete>
</mapper>